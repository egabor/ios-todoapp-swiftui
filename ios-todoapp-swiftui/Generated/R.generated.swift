//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 28 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `DestructiveButtonDisabledBackground`.
    static let destructiveButtonDisabledBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonDisabledBackground")
    /// Color `DestructiveButtonDisabledBorder`.
    static let destructiveButtonDisabledBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonDisabledBorder")
    /// Color `DestructiveButtonDisabledTitle`.
    static let destructiveButtonDisabledTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonDisabledTitle")
    /// Color `DestructiveButtonHighlightedBackground`.
    static let destructiveButtonHighlightedBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonHighlightedBackground")
    /// Color `DestructiveButtonHighlightedBorder`.
    static let destructiveButtonHighlightedBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonHighlightedBorder")
    /// Color `DestructiveButtonHighlightedTitle`.
    static let destructiveButtonHighlightedTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonHighlightedTitle")
    /// Color `DestructiveButtonNormalBackground`.
    static let destructiveButtonNormalBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonNormalBackground")
    /// Color `DestructiveButtonNormalBorder`.
    static let destructiveButtonNormalBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonNormalBorder")
    /// Color `DestructiveButtonNormalTitle`.
    static let destructiveButtonNormalTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "DestructiveButtonNormalTitle")
    /// Color `GeneralTextFieldDisabledBackground`.
    static let generalTextFieldDisabledBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldDisabledBackground")
    /// Color `GeneralTextFieldDisabledBorder`.
    static let generalTextFieldDisabledBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldDisabledBorder")
    /// Color `GeneralTextFieldEditingBackground`.
    static let generalTextFieldEditingBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldEditingBackground")
    /// Color `GeneralTextFieldEditingBorder`.
    static let generalTextFieldEditingBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldEditingBorder")
    /// Color `GeneralTextFieldEditingCaret`.
    static let generalTextFieldEditingCaret = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldEditingCaret")
    /// Color `GeneralTextFieldErrorBackground`.
    static let generalTextFieldErrorBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldErrorBackground")
    /// Color `GeneralTextFieldErrorBorder`.
    static let generalTextFieldErrorBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldErrorBorder")
    /// Color `GeneralTextFieldErrorCaret`.
    static let generalTextFieldErrorCaret = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldErrorCaret")
    /// Color `GeneralTextFieldNormalBackground`.
    static let generalTextFieldNormalBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldNormalBackground")
    /// Color `GeneralTextFieldNormalBorder`.
    static let generalTextFieldNormalBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldNormalBorder")
    /// Color `GeneralTextFieldPlaceholder`.
    static let generalTextFieldPlaceholder = Rswift.ColorResource(bundle: R.hostingBundle, name: "GeneralTextFieldPlaceholder")
    /// Color `PrimaryButtonDisabledBackground`.
    static let primaryButtonDisabledBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryButtonDisabledBackground")
    /// Color `PrimaryButtonDisabledTitle`.
    static let primaryButtonDisabledTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryButtonDisabledTitle")
    /// Color `PrimaryButtonHighlightedBackground`.
    static let primaryButtonHighlightedBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryButtonHighlightedBackground")
    /// Color `PrimaryButtonHighlightedTitle`.
    static let primaryButtonHighlightedTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryButtonHighlightedTitle")
    /// Color `PrimaryButtonNormalBackground`.
    static let primaryButtonNormalBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryButtonNormalBackground")
    /// Color `PrimaryButtonNormalTitle`.
    static let primaryButtonNormalTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryButtonNormalTitle")
    /// Color `TextFieldText`.
    static let textFieldText = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldText")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonDisabledBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonDisabledBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonDisabledBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonDisabledBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonDisabledBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonDisabledBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonDisabledTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonDisabledTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonDisabledTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonHighlightedBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonHighlightedBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonHighlightedBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonHighlightedBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonHighlightedBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonHighlightedBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonHighlightedTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonHighlightedTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonHighlightedTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonNormalBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonNormalBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonNormalBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonNormalBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonNormalBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonNormalBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DestructiveButtonNormalTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func destructiveButtonNormalTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.destructiveButtonNormalTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldDisabledBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldDisabledBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldDisabledBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldDisabledBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldDisabledBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldDisabledBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldEditingBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldEditingBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldEditingBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldEditingBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldEditingBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldEditingBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldEditingCaret", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldEditingCaret(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldEditingCaret, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldErrorBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldErrorBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldErrorBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldErrorBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldErrorBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldErrorBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldErrorCaret", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldErrorCaret(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldErrorCaret, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldNormalBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldNormalBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldNormalBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldNormalBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldNormalBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldNormalBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GeneralTextFieldPlaceholder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func generalTextFieldPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.generalTextFieldPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryButtonDisabledBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonDisabledBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonDisabledBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryButtonDisabledTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonDisabledTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonDisabledTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryButtonHighlightedBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonHighlightedBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonHighlightedBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryButtonHighlightedTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonHighlightedTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonHighlightedTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryButtonNormalBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonNormalBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonNormalBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryButtonNormalTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryButtonNormalTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryButtonNormalTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldText, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonDisabledBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonDisabledBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonDisabledBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonDisabledBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonDisabledBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonDisabledBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonDisabledTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonDisabledTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonDisabledTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonHighlightedBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonHighlightedBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonHighlightedBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonHighlightedBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonHighlightedBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonHighlightedBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonHighlightedTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonHighlightedTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonHighlightedTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonNormalBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonNormalBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonNormalBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonNormalBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonNormalBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonNormalBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DestructiveButtonNormalTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func destructiveButtonNormalTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.destructiveButtonNormalTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldDisabledBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldDisabledBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldDisabledBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldDisabledBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldDisabledBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldDisabledBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldEditingBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldEditingBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldEditingBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldEditingBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldEditingBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldEditingBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldEditingCaret", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldEditingCaret(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldEditingCaret.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldErrorBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldErrorBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldErrorBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldErrorBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldErrorBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldErrorBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldErrorCaret", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldErrorCaret(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldErrorCaret.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldNormalBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldNormalBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldNormalBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldNormalBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldNormalBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldNormalBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GeneralTextFieldPlaceholder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func generalTextFieldPlaceholder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.generalTextFieldPlaceholder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryButtonDisabledBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonDisabledBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonDisabledBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryButtonDisabledTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonDisabledTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonDisabledTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryButtonHighlightedBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonHighlightedBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonHighlightedBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryButtonHighlightedTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonHighlightedTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonHighlightedTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryButtonNormalBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonNormalBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonNormalBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryButtonNormalTitle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryButtonNormalTitle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryButtonNormalTitle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldText.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityNetworkClient = true

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `.rswiftignore.txt`.
    static let rswiftignoreTxt = Rswift.FileResource(bundle: R.hostingBundle, name: ".rswiftignore", pathExtension: "txt")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `swiftgen-colors.yml`.
    static let swiftgenColorsYml = Rswift.FileResource(bundle: R.hostingBundle, name: "swiftgen-colors", pathExtension: "yml")

    /// `bundle.url(forResource: ".rswiftignore", withExtension: "txt")`
    static func rswiftignoreTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rswiftignoreTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "swiftgen-colors", withExtension: "yml")`
    static func swiftgenColorsYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftgenColorsYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// Value: Error
      static let alertErrorTitle = Rswift.StringResource(key: "alert.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let alertErrorButtonOk = Rswift.StringResource(key: "alert.error.button.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Something went wrong
      static let alertMessageGeneral = Rswift.StringResource(key: "alert.message.general", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Status code: %d
      static let alertMessageStatusCode = Rswift.StringResource(key: "alert.message.statusCode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Error
      static func alertErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.error.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.error.title"
        }

        return NSLocalizedString("alert.error.title", bundle: bundle, comment: "")
      }

      /// Value: Ok
      static func alertErrorButtonOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.error.button.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.error.button.ok"
        }

        return NSLocalizedString("alert.error.button.ok", bundle: bundle, comment: "")
      }

      /// Value: Something went wrong
      static func alertMessageGeneral(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.message.general", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.message.general"
        }

        return NSLocalizedString("alert.message.general", bundle: bundle, comment: "")
      }

      /// Value: Status code: %d
      static func alertMessageStatusCode(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("alert.message.statusCode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.message.statusCode"
        }

        let format = NSLocalizedString("alert.message.statusCode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.todoDetailsScreen` struct is generated, and contains static references to 7 localization keys.
    struct todoDetailsScreen {
      /// Value: Completed
      static let toggleCompletedTitle = Rswift.StringResource(key: "toggle.completed.title", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create
      static let createButtonCreate = Rswift.StringResource(key: "create.button.create", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create new
      static let createTitle = Rswift.StringResource(key: "create.title", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let editButtonDelete = Rswift.StringResource(key: "edit.button.delete", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit Todo
      static let editTitle = Rswift.StringResource(key: "edit.title", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let editButtonSave = Rswift.StringResource(key: "edit.button.save", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Todo Title
      static let inputTitlePlaceholder = Rswift.StringResource(key: "input.title.placeholder", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Completed
      static func toggleCompletedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toggle.completed.title", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "toggle.completed.title"
        }

        return NSLocalizedString("toggle.completed.title", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Create
      static func createButtonCreate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.button.create", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "create.button.create"
        }

        return NSLocalizedString("create.button.create", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Create new
      static func createTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.title", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "create.title"
        }

        return NSLocalizedString("create.title", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func editButtonDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.button.delete", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "edit.button.delete"
        }

        return NSLocalizedString("edit.button.delete", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Edit Todo
      static func editTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.title", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "edit.title"
        }

        return NSLocalizedString("edit.title", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func editButtonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.button.save", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "edit.button.save"
        }

        return NSLocalizedString("edit.button.save", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Todo Title
      static func inputTitlePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input.title.placeholder", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "input.title.placeholder"
        }

        return NSLocalizedString("input.title.placeholder", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.todoListScreen` struct is generated, and contains static references to 3 localization keys.
    struct todoListScreen {
      /// Value: Hide Completed Items
      static let buttonHideCompletedItems = Rswift.StringResource(key: "button.hideCompletedItems", tableName: "TodoListScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show All Items
      static let buttonShowAllItems = Rswift.StringResource(key: "button.showAllItems", tableName: "TodoListScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Todo Items
      static let title = Rswift.StringResource(key: "title", tableName: "TodoListScreen", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Hide Completed Items
      static func buttonHideCompletedItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.hideCompletedItems", tableName: "TodoListScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoListScreen", preferredLanguages: preferredLanguages) else {
          return "button.hideCompletedItems"
        }

        return NSLocalizedString("button.hideCompletedItems", tableName: "TodoListScreen", bundle: bundle, comment: "")
      }

      /// Value: Show All Items
      static func buttonShowAllItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.showAllItems", tableName: "TodoListScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoListScreen", preferredLanguages: preferredLanguages) else {
          return "button.showAllItems"
        }

        return NSLocalizedString("button.showAllItems", tableName: "TodoListScreen", bundle: bundle, comment: "")
      }

      /// Value: Todo Items
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "TodoListScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoListScreen", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "TodoListScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
