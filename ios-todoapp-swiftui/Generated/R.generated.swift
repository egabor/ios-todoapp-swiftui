//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityNetworkClient = true

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// Value: Error
      static let alertErrorTitle = Rswift.StringResource(key: "alert.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let alertErrorButtonOk = Rswift.StringResource(key: "alert.error.button.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Something went wrong
      static let alertMessageGeneral = Rswift.StringResource(key: "alert.message.general", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Status code: %d
      static let alertMessageStatusCode = Rswift.StringResource(key: "alert.message.statusCode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Error
      static func alertErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.error.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.error.title"
        }

        return NSLocalizedString("alert.error.title", bundle: bundle, comment: "")
      }

      /// Value: Ok
      static func alertErrorButtonOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.error.button.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.error.button.ok"
        }

        return NSLocalizedString("alert.error.button.ok", bundle: bundle, comment: "")
      }

      /// Value: Something went wrong
      static func alertMessageGeneral(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.message.general", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.message.general"
        }

        return NSLocalizedString("alert.message.general", bundle: bundle, comment: "")
      }

      /// Value: Status code: %d
      static func alertMessageStatusCode(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("alert.message.statusCode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.message.statusCode"
        }

        let format = NSLocalizedString("alert.message.statusCode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.todoDetailsScreen` struct is generated, and contains static references to 7 localization keys.
    struct todoDetailsScreen {
      /// Value: Completed
      static let toggleCompletedTitle = Rswift.StringResource(key: "toggle.completed.title", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create
      static let createButtonCreate = Rswift.StringResource(key: "create.button.create", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create new
      static let createTitle = Rswift.StringResource(key: "create.title", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let editButtonDelete = Rswift.StringResource(key: "edit.button.delete", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit Todo
      static let editTitle = Rswift.StringResource(key: "edit.title", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let editButtonSave = Rswift.StringResource(key: "edit.button.save", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Todo Title
      static let inputTitlePlaceholder = Rswift.StringResource(key: "input.title.placeholder", tableName: "TodoDetailsScreen", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Completed
      static func toggleCompletedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toggle.completed.title", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "toggle.completed.title"
        }

        return NSLocalizedString("toggle.completed.title", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Create
      static func createButtonCreate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.button.create", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "create.button.create"
        }

        return NSLocalizedString("create.button.create", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Create new
      static func createTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.title", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "create.title"
        }

        return NSLocalizedString("create.title", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func editButtonDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.button.delete", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "edit.button.delete"
        }

        return NSLocalizedString("edit.button.delete", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Edit Todo
      static func editTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.title", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "edit.title"
        }

        return NSLocalizedString("edit.title", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func editButtonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit.button.save", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "edit.button.save"
        }

        return NSLocalizedString("edit.button.save", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      /// Value: Todo Title
      static func inputTitlePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input.title.placeholder", tableName: "TodoDetailsScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoDetailsScreen", preferredLanguages: preferredLanguages) else {
          return "input.title.placeholder"
        }

        return NSLocalizedString("input.title.placeholder", tableName: "TodoDetailsScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.todoListScreen` struct is generated, and contains static references to 3 localization keys.
    struct todoListScreen {
      /// Value: Hide Completed Items
      static let buttonHideCompletedItems = Rswift.StringResource(key: "button.hideCompletedItems", tableName: "TodoListScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show All Items
      static let buttonShowAllItems = Rswift.StringResource(key: "button.showAllItems", tableName: "TodoListScreen", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Todo Items
      static let title = Rswift.StringResource(key: "title", tableName: "TodoListScreen", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Hide Completed Items
      static func buttonHideCompletedItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.hideCompletedItems", tableName: "TodoListScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoListScreen", preferredLanguages: preferredLanguages) else {
          return "button.hideCompletedItems"
        }

        return NSLocalizedString("button.hideCompletedItems", tableName: "TodoListScreen", bundle: bundle, comment: "")
      }

      /// Value: Show All Items
      static func buttonShowAllItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.showAllItems", tableName: "TodoListScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoListScreen", preferredLanguages: preferredLanguages) else {
          return "button.showAllItems"
        }

        return NSLocalizedString("button.showAllItems", tableName: "TodoListScreen", bundle: bundle, comment: "")
      }

      /// Value: Todo Items
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "TodoListScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TodoListScreen", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "TodoListScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
